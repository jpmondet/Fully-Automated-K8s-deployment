apiVersion: v1
kind: Namespace
metadata:
  name: kubefw
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefw
  namespace: kubefw
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kubefw
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefw
subjects:
- kind: ServiceAccount
  name: kubefw
  namespace: kubefw
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kubefw
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - networkpolicies
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubefw
  namespace: kubefw
  labels:
    k8s-app: kubefw
spec:
  selector:
    matchLabels:
      k8s-app: kubefw
  template:
    metadata:
      labels:
        k8s-app: kubefw
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      containers:
      - name: kubefw
        image: docker.io/jpmondet/kubefw:0.1.2
        args: ["/kubefw"]
        securityContext:
          privileged: true
        imagePullPolicy: IfNotPresent
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        livenessProbe:
          httpGet:
            path: /healthz
            port: 20244
          initialDelaySeconds: 10
          periodSeconds: 3
      hostNetwork: true
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/unschedulable
        operator: Exists
